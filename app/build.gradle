def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {

    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "me.fernthedev.lightclientandroidv2"
        minSdkVersion 16
        targetSdkVersion 27

        multiDexEnabled true

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }




    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {

        release {

            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig signingConfigs.debug

            signingConfig signingConfigs.release

            minifyEnabled true
            shrinkResources true

            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

flutter {
    source '../..'
}

repositories {
    mavenCentral()

    maven { url "https://oss.sonatype.org/content/groups/public" }
    maven { url "http://repo.maven.apache.org/maven2" }

    mavenLocal()
}

dependencies {
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    configurations {
        all*.exclude module: 'okhttp'
        all*.exclude module: 'okio'
        all*.exclude module: 'gson'
    }
    implementation fileTree(include: ['*.jar'], dir: 'libs')


    implementation('com.github.fernthedev:client:1.0-SNAPSHOT') {
        exclude module: 'guava-jdk5'
        exclude group: 'io.netty', module: 'netty-all'
        exclude group: 'com.google.guava', module: 'failureaccess'
        exclude group: 'com.google.guava'
        exclude group: 'com.google.gson'
        exclude group: 'log4j'
        exclude group: 'org.apache.commons'
        exclude group: 'org.yaml'
        exclude group: 'com.googlecode.json-simple'
        exclude group: 'org.jetbrains'
        exclude group: 'com.google.gson', module: 'failureaccess'
    }
    // implementation group: 'io.netty',name: 'netty-all',version: '4.1.32.Final'
    //  implementation 'com.hovans.netty:library:3.8.0'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
}
